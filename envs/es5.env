let [[%ToString]] = func (s) {
    if(prim("primitive?", s)) {
        prim("prim->str", s)
    }
    else {
        throw "ToString not defined for non-primitives yet"
    }
}

let [[%print]] = func(o, s) {
    prim("print", %ToString(s["0"]))
}

let [[%push]] = func(this, args) {
  prim("print", "push");
  this[ prim("prim->str", this["length"]) = args["0"] ];
  this[ "length" = prim("+", this["length"], 1) ]
}

let [[%toString]] = func(this, args) {
  prim("print", "toString")
}

let [[%sort]] = func(this, args) {
  prim("print", "sort")
}

let [[%join]] = func(this, args) {
  prim("print", "join")
}

let [[%eval]] = func(this, args) {
  prim("print", "eval")
}

let [[%isNaN]] = func(this, args) {
  prim("print", "isNaN")
}

let [[%replace]] = func(this, args) {
  prim("print", "replace")
}

let [[%hasOwnProperty]] = func(this, args) {
  prim("print", "hasOwnProperty")
}

let [[%getOwnPropertyDescriptor]] = func(this, args) {
  prim("print", "getOwnPropertyDescriptor")
}

let [[%call]] = func(this, args) {
  prim("print", "call")
}

let [[%test]] = func(this, args) {
  prim("print", "test")
}

let [[%ObjectProto]] = { [] 
  "toString" : {#value %toString, #writable false},
  "hasOwnProperty" : {#value %hasOwnProperty, #writable false},
  "getOwnPropertyDescriptor" : {#value %getOwnPropertyDescriptor, #writable false} }

let [[%FunctionProto]] = { []
  "toString" : {#value %toString, #writable false},
  "call" : {#value %call, #writable false} }

let [[%ArrayProto]] = { [] 
  "toString" : {#value %toString, #writable false},
  "push" : {#value %push, #writable false}, 
  "sort" : {#value %sort, #writable false},
  "join" : {#value %join, #writable false} }

let [[%StringProto]] = { [] 
  "toString" : {#value %toString, #writable false},
  "replace" : {#value %replace, #writable false} }

let [[%RegexpProto]] = { []
  "test" : {#value %test, #writable false} }

let [[%global]] = { [] 
  "eval" : {#value %eval, #writable false}, 
  "print" : {#value %print, #writable false}, 
  "Array" : {#value %ArrayProto, #writable false},
  "String" : {#value %StringProto, #writable false},
  "Object" : {#value %ObjectProto, #writable false},
  "Function" : {#value %FunctionProto, #writable false} }

let [[%context]] = %global
